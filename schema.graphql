# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  apps(where: AppWhereInput! = {}, orderBy: [AppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppWhereUniqueInput): [App!]
  appsCount(where: AppWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  apps: AppManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AppManyRelationFilter {
  every: AppWhereInput
  some: AppWhereInput
  none: AppWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  apps: AppRelateToManyForUpdateInput
}

input AppRelateToManyForUpdateInput {
  disconnect: [AppWhereUniqueInput!]
  set: [AppWhereUniqueInput!]
  create: [AppCreateInput!]
  connect: [AppWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  apps: AppRelateToManyForCreateInput
}

input AppRelateToManyForCreateInput {
  create: [AppCreateInput!]
  connect: [AppWhereUniqueInput!]
}

type App {
  id: ID!
  name: String
  description: String
  releaseTime: DateTime
  owner: User
  type: Type
  status: String
  apk: FileFieldOutput
  logo: ImageFieldOutput
  showStatusBar: Boolean
  supportHorizontalKeyboard: Boolean
  versionName: String
  versionCode: Int
  packageName: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input AppWhereUniqueInput {
  id: ID
}

input AppWhereInput {
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  NOT: [AppWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  releaseTime: DateTimeFilter
  owner: UserWhereInput
  type: TypeWhereInput
  status: StringNullableFilter
  showStatusBar: BooleanFilter
  supportHorizontalKeyboard: BooleanFilter
  versionName: StringFilter
  versionCode: IntNullableFilter
  packageName: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AppOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  releaseTime: OrderDirection
  status: OrderDirection
  showStatusBar: OrderDirection
  supportHorizontalKeyboard: OrderDirection
  versionName: OrderDirection
  versionCode: OrderDirection
  packageName: OrderDirection
}

input AppUpdateInput {
  name: String
  description: String
  releaseTime: DateTime
  owner: UserRelateToOneForUpdateInput
  type: TypeRelateToOneForUpdateInput
  status: String
  apk: FileFieldInput
  logo: ImageFieldInput
  showStatusBar: Boolean
  supportHorizontalKeyboard: Boolean
  versionName: String
  versionCode: Int
  packageName: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TypeRelateToOneForUpdateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
  disconnect: Boolean
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageFieldInput {
  upload: Upload!
}

input AppUpdateArgs {
  where: AppWhereUniqueInput!
  data: AppUpdateInput!
}

input AppCreateInput {
  name: String
  description: String
  releaseTime: DateTime
  owner: UserRelateToOneForCreateInput
  type: TypeRelateToOneForCreateInput
  status: String
  apk: FileFieldInput
  logo: ImageFieldInput
  showStatusBar: Boolean
  supportHorizontalKeyboard: Boolean
  versionName: String
  versionCode: Int
  packageName: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TypeRelateToOneForCreateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
}

type Type {
  id: ID!
  name: String
  apps(where: AppWhereInput! = {}, orderBy: [AppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppWhereUniqueInput): [App!]
  appsCount(where: AppWhereInput! = {}): Int
  createTime: DateTime
  updateTime: DateTime
}

input TypeWhereUniqueInput {
  id: ID
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  id: IDFilter
  name: StringFilter
  apps: AppManyRelationFilter
  createTime: DateTimeNullableFilter
  updateTime: DateTimeFilter
}

input TypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createTime: OrderDirection
  updateTime: OrderDirection
}

input TypeUpdateInput {
  name: String
  apps: AppRelateToManyForUpdateInput
  createTime: DateTime
  updateTime: DateTime
}

input TypeUpdateArgs {
  where: TypeWhereUniqueInput!
  data: TypeUpdateInput!
}

input TypeCreateInput {
  name: String
  apps: AppRelateToManyForCreateInput
  createTime: DateTime
  updateTime: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createApp(data: AppCreateInput!): App
  createApps(data: [AppCreateInput!]!): [App]
  updateApp(where: AppWhereUniqueInput!, data: AppUpdateInput!): App
  updateApps(data: [AppUpdateArgs!]!): [App]
  deleteApp(where: AppWhereUniqueInput!): App
  deleteApps(where: [AppWhereUniqueInput!]!): [App]
  createType(data: TypeCreateInput!): Type
  createTypes(data: [TypeCreateInput!]!): [Type]
  updateType(where: TypeWhereUniqueInput!, data: TypeUpdateInput!): Type
  updateTypes(data: [TypeUpdateArgs!]!): [Type]
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteTypes(where: [TypeWhereUniqueInput!]!): [Type]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  apps(where: AppWhereInput! = {}, orderBy: [AppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppWhereUniqueInput): [App!]
  app(where: AppWhereUniqueInput!): App
  appsCount(where: AppWhereInput! = {}): Int
  types(where: TypeWhereInput! = {}, orderBy: [TypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TypeWhereUniqueInput): [Type!]
  type(where: TypeWhereUniqueInput!): Type
  typesCount(where: TypeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
